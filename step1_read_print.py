# GENERATED by make_pyunitt.py with step1_read_print.mal as input

import unittest
import repl
import printer

err_str = "expected: {} actual: {}"

class REPLTest(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test0(self):
        exp = "1"
        res = repl.repl("1")
        assert(res == exp), \
            err_str.format(exp, res)

    def test1(self):
        exp = "7"
        res = repl.repl("7")
        assert(res == exp), \
            err_str.format(exp, res)

    def test2(self):
        exp = "7"
        res = repl.repl("  7   ")
        assert(res == exp), \
            err_str.format(exp, res)

    def test3(self):
        exp = "-123"
        res = repl.repl("-123")
        assert(res == exp), \
            err_str.format(exp, res)

    def test4(self):
        exp = "+"
        res = repl.repl("+")
        assert(res == exp), \
            err_str.format(exp, res)

    def test5(self):
        exp = "abc"
        res = repl.repl("abc")
        assert(res == exp), \
            err_str.format(exp, res)

    def test6(self):
        exp = "abc"
        res = repl.repl("   abc   ")
        assert(res == exp), \
            err_str.format(exp, res)

    def test7(self):
        exp = "abc5"
        res = repl.repl("abc5")
        assert(res == exp), \
            err_str.format(exp, res)

    def test8(self):
        exp = "abc-def"
        res = repl.repl("abc-def")
        assert(res == exp), \
            err_str.format(exp, res)

    def test9(self):
        exp = "-"
        res = repl.repl("-")
        assert(res == exp), \
            err_str.format(exp, res)

    def test10(self):
        exp = "-abc"
        res = repl.repl("-abc")
        assert(res == exp), \
            err_str.format(exp, res)

    def test11(self):
        exp = "->>"
        res = repl.repl("->>")
        assert(res == exp), \
            err_str.format(exp, res)

    def test12(self):
        exp = "(+ 1 2)"
        res = repl.repl("(+ 1 2)")
        assert(res == exp), \
            err_str.format(exp, res)

    def test13(self):
        exp = "()"
        res = repl.repl("()")
        assert(res == exp), \
            err_str.format(exp, res)

    def test14(self):
        exp = "()"
        res = repl.repl("( )")
        assert(res == exp), \
            err_str.format(exp, res)

    def test15(self):
        exp = "(nil)"
        res = repl.repl("(nil)")
        assert(res == exp), \
            err_str.format(exp, res)

    def test16(self):
        exp = "((3 4))"
        res = repl.repl("((3 4))")
        assert(res == exp), \
            err_str.format(exp, res)

    def test17(self):
        exp = "(+ 1 (+ 2 3))"
        res = repl.repl("(+ 1 (+ 2 3))")
        assert(res == exp), \
            err_str.format(exp, res)

    def test18(self):
        exp = "(+ 1 (+ 2 3))"
        res = repl.repl("  ( +   1   (+   2 3   )   )  ")
        assert(res == exp), \
            err_str.format(exp, res)

    def test19(self):
        exp = "(* 1 2)"
        res = repl.repl("(* 1 2)")
        assert(res == exp), \
            err_str.format(exp, res)

    def test20(self):
        exp = "(** 1 2)"
        res = repl.repl("(** 1 2)")
        assert(res == exp), \
            err_str.format(exp, res)

    def test21(self):
        exp = "(* -3 6)"
        res = repl.repl("(* -3 6)")
        assert(res == exp), \
            err_str.format(exp, res)

    def test22(self):
        exp = "(() ())"
        res = repl.repl("(()())")
        assert(res == exp), \
            err_str.format(exp, res)

    def test23(self):
        exp = "(1 2 3)"
        res = repl.repl("(1 2, 3,,,,),,")
        assert(res == exp), \
            err_str.format(exp, res)

    def test24(self):
        exp = "nil"
        res = repl.repl("nil")
        assert(res == exp), \
            err_str.format(exp, res)

    def test25(self):
        exp = "true"
        res = repl.repl("true")
        assert(res == exp), \
            err_str.format(exp, res)

    def test26(self):
        exp = "false"
        res = repl.repl("false")
        assert(res == exp), \
            err_str.format(exp, res)

    def test27(self):
        exp = "\"abc\""
        res = repl.repl("\"abc\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test28(self):
        exp = "\"abc\""
        res = repl.repl("   \"abc\"   ")
        assert(res == exp), \
            err_str.format(exp, res)

    def test29(self):
        exp = "\"abc (with parens)\""
        res = repl.repl("\"abc (with parens)\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test30(self):
        exp = "\"abc\\\"def\""
        res = repl.repl("\"abc\\\"def\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test31(self):
        exp = "\"\""
        res = repl.repl("\"\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test32(self):
        exp = "\"\\\\\""
        res = repl.repl("\"\\\\\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test33(self):
        exp = "\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\""
        res = repl.repl("\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test34(self):
        exp = "\"&\""
        res = repl.repl("\"&\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test35(self):
        exp = "\"'\""
        res = repl.repl("\"'\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test36(self):
        exp = "\"(\""
        res = repl.repl("\"(\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test37(self):
        exp = "\")\""
        res = repl.repl("\")\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test38(self):
        exp = "\"*\""
        res = repl.repl("\"*\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test39(self):
        exp = "\"+\""
        res = repl.repl("\"+\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test40(self):
        exp = "\",\""
        res = repl.repl("\",\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test41(self):
        exp = "\"-\""
        res = repl.repl("\"-\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test42(self):
        exp = "\"/\""
        res = repl.repl("\"/\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test43(self):
        exp = "\":\""
        res = repl.repl("\":\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test44(self):
        exp = "\";\""
        res = repl.repl("\";\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test45(self):
        exp = "\"<\""
        res = repl.repl("\"<\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test46(self):
        exp = "\"=\""
        res = repl.repl("\"=\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test47(self):
        exp = "\">\""
        res = repl.repl("\">\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test48(self):
        exp = "\"?\""
        res = repl.repl("\"?\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test49(self):
        exp = "\"@\""
        res = repl.repl("\"@\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test50(self):
        exp = "\"[\""
        res = repl.repl("\"[\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test51(self):
        exp = "\"]\""
        res = repl.repl("\"]\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test52(self):
        exp = "\"^\""
        res = repl.repl("\"^\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test53(self):
        exp = "\"_\""
        res = repl.repl("\"_\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test54(self):
        exp = "\"`\""
        res = repl.repl("\"`\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test55(self):
        exp = "\"{\""
        res = repl.repl("\"{\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test56(self):
        exp = "\"}\""
        res = repl.repl("\"}\"")
        assert(res == exp), \
            err_str.format(exp, res)

    def test57(self):
        exp = "\"~\""
        res = repl.repl("\"~\"")
        assert(res == exp), \
            err_str.format(exp, res)

if __name__ == "__main__":
    unittest.main()
